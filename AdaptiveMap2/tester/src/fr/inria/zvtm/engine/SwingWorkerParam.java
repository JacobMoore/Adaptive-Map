package fr.inria.zvtm.engine;import java.util.Vector;import javax.swing.SwingUtilities;/** * An abstract class that you subclass to perform * GUI-related work in a dedicated thread. * For instructions on using this class, see  * http://java.sun.com/products/jfc/swingdoc-current/threads2.html * Allow parameters for the <code>construct</code> method. * @see fr.inria.zvtm.engine.SwingWorker */public abstract class SwingWorkerParam implements Runnable{    private Object value;  // see getValue(), setValue()    private Vector param;  //parameters of the construct method    private Runnable doFinished;    /**      * Class to maintain reference to current worker thread     * under separate synchronization control.     */    private static class ThreadVar {        private Thread thread;        ThreadVar(Thread t) { thread = t; }        synchronized Thread get() { return thread; }        synchronized void clear() { thread = null; }    }    private ThreadVar threadVar;    /**      * Get the value produced by the worker thread, or null if it      * hasn't been constructed yet.     */    protected synchronized Object getValue() { 	return value;     }    /**      * Set the value produced by worker thread      */    private synchronized void setValue(Object x) { 	value = x;     }    /**      * Compute the value to be returned by the <code>get</code> method.      */    public abstract Object construct(Vector p);    /**     * Called on the event dispatching thread (not on the worker thread)     * after the <code>construct</code> method has returned.     */    public void finished() {    }    /**     * A new method that interrupts the worker thread.  Call this method     * to force the worker to abort what it's doing.     */    public void interrupt() {        Thread t = threadVar.get();        if (t != null) {	    t.interrupt();	}	threadVar.clear();    }    /**     * Return the value created by the <code>construct</code> method.       * Returns null if either the constructing thread or     * the current thread was interrupted before a value was produced.     *      * @return the value created by the <code>construct</code> method     */    public Object get() {        while (true) {              Thread t = threadVar.get();            if (t == null) {                return getValue();            }            try {                t.join();            }            catch (InterruptedException e) {                Thread.currentThread().interrupt(); // propagate                return null;            }        }    }    public void run() {	try {	    this.setValue(this.construct(this.param));	}	finally {	    this.threadVar.clear();	}	SwingUtilities.invokeLater(this.doFinished);    }    /**     * Start a thread that will call the <code>construct</code> method     * and then exit.     * @param constructParameters parameters the internal thread use     * when it calls the construct method.     */    public SwingWorkerParam(Vector constructParameters) {	this.param=constructParameters;        this.doFinished=new Runnable() {		public void run() { finished(); }	    };        Thread doConstruct = new Thread(this);        this.threadVar = new ThreadVar(doConstruct);        doConstruct.start();    }}
